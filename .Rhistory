lm_fit<-lm(data=penguins,body_mass~flipper_len)
penguins
library(tidyverse)
library(rsample)
library(tidyverse)
install.packages("rsample")
library(rsample)
lm_fit<-lm(data=penguins,body_mass~flipper_len)
set.seed(123)
#creating prediction set
all_penguins<-initial_split(penguins,prop=0.8)
train_penguins<-training(all_penguins)
test_penguins<-testing(all_penguins)
#Graphing X,Y, and prediction set(shaded bands)
View(test_penguins)
View(train_penguins)
set.seed(123)
#creating prediction set
all_penguins<-initial_split(penguins,prop=0.5)
train_penguins<-training(all_penguins)
test_penguins<-testing(all_penguins)
#Graphing X,Y, and prediction set(shaded bands)
set.seed(123)
#creating prediction set
all_penguins<-initial_split(penguins,prop=0.5)
train_penguins<-training(all_penguins)
test_penguins<-testing(all_penguins)
fit_penguins<-lm(train_penguins)
fitted_penguins<-fitted.values(fit_penguins)
#Graphing X,Y, and prediction set(shaded bands)
View(fit_penguins)
View(train_penguins)
typeof(test_penguins)
set.seed(123)
#creating prediction set
all_penguins<-initial_split(penguins,prop=0.5)
train_penguins<-training(all_penguins)
test_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
fitted_penguins<-fitted.values(fit_penguins)
#Graphing X,Y, and prediction set(shaded bands)
fitted_penguins
View(test_penguins)
library(tidyverse)
install.packages("rsample")
library(rsample)
lm_fit<-lm(data=penguins,body_mass~flipper_len)
install.packages("rsample")
library(tidyverse)
library(rsample)
lm_fit<-lm(data=penguins,body_mass~flipper_len)
library(tidyverse)
library(rsample)
a<-0.05
library(tidyverse)
library(rsample)
a<-0.05
n_pen<-nrow(penguins)
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the residuals are the score)
all_penguins<-initial_split(penguins,prop=0.5)
train_penguins<-training(all_penguins)
test_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
fitted_penguins<-fitted.values(fit_penguins)
#2 Use other half to compute compute the score(in this case the score is residuals)
fit_test_penguins<-lm(data=test_penguins,body_mass~flipper_len)
residual_test_penguins<-residuals(fit_test_penguins)
#3 Sort second half of scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list
threshold<-(1-a)((n_pen/2)+1)
#4 Return the prediction set  which is made up of all the values less than or equal to the threshold
#Graphing X,Y, and prediction set(shaded bands)
library(tidyverse)
library(rsample)
a<-0.05
n_pen<-nrow(penguins)
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the residuals are the score)
all_penguins<-initial_split(penguins,prop=0.5)
train_penguins<-training(all_penguins)
test_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
fitted_penguins<-fitted.values(fit_penguins)
#2 Use other half to compute compute the score(in this case the score is residuals)
fit_test_penguins<-lm(data=test_penguins,body_mass~flipper_len)
residual_test_penguins<-residuals(fit_test_penguins)
#3 Sort second half of scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list
threshold<-(1-a)((n_pen/2)+1)
#4 Return the prediction set  which is made up of all the values less than or equal to the threshold
#Graphing X,Y, and prediction set(shaded bands)
library(tidyverse)
library(rsample)
a<-0.05
mypenguins<-penguins |>
filter(!is.na(body_mass) & !is.na(flipper_len))
penguins
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the absolute value of the residuals are the score) this is called the training set
all_penguins<-initial_split(mypenguins,prop=0.5)
train_penguins<-training(all_penguins)
calbration_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
#2 Use model from training set and data from other half to compute compute the score(in this case the score is residuals) the data from the other half is called the calibration set
predict_pen<-predict(object=fit_penguins,newdata=calbration_penguins)
score<-abs(predict_pen-calbration_penguins$body_mass)
#3 Sort second half of scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list
sorted_score<-sort(score)
n_score<-length(score)
threshold_position<-ceiling((1-a)((n_pen/2)+1))
threshold<-sorted_score[threshold_position]
#4 Return the prediction interval which is made up of all the values less than or equal to the threshold
pred_lower_bound<- predict_pen-threshold
pred_upper_bound<- predict_pen+threshold
#Graphing X,Y, and prediction set(shaded bands)
interval_df<-df(lower_bound=pred_lower_bound,
upper_bound=pred_upper_bound)
library(tidyverse)
library(rsample)
a<-0.05
mypenguins<-penguins |>
filter(!is.na(body_mass) & !is.na(flipper_len))
n_pen<-nrows(mypenguins)
library(tidyverse)
library(rsample)
a<-0.05
mypenguins<-penguins |>
filter(!is.na(body_mass) & !is.na(flipper_len))
n_pen<-nrow(mypenguins)
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the absolute value of the residuals are the score) this is called the training set
all_penguins<-initial_split(mypenguins,prop=0.5)
train_penguins<-training(all_penguins)
calbration_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
#2 Use model from training set and data from other half to compute compute the score(in this case the score is residuals) the data from the other half is called the calibration set
predict_pen<-predict(object=fit_penguins,newdata=calbration_penguins)
score<-abs(predict_pen-calbration_penguins$body_mass)
#3 Sort second half of scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list
sorted_score<-sort(score)
n_score<-length(score)
threshold_position<-ceiling((1-a)((n_pen/2)+1))
threshold<-sorted_score[threshold_position]
#4 Return the prediction interval which is made up of all the values less than or equal to the threshold
pred_lower_bound<- predict_pen-threshold
pred_upper_bound<- predict_pen+threshold
#Graphing X,Y, and prediction set(shaded bands)
interval_df<-df(lower_bound=pred_lower_bound,
upper_bound=pred_upper_bound)
library(tidyverse)
library(rsample)
A<-0.05
mypenguins<-penguins |>
filter(!is.na(body_mass) & !is.na(flipper_len))
n_pen<-nrow(mypenguins)
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the absolute value of the residuals are the score) this is called the training set
all_penguins<-initial_split(mypenguins,prop=0.5)
train_penguins<-training(all_penguins)
calbration_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
#2 Use model from training set and data from other half to compute compute the score(in this case the score is residuals) the data from the other half is called the calibration set
predict_pen<-predict(object=fit_penguins,newdata=calbration_penguins)
score<-abs(predict_pen-calbration_penguins$body_mass)
#3 Sort second half of scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list
sorted_score<-sort(score)
n_score<-length(score)
threshold_position<-ceiling((1-A)((n_pen/2)+1))
threshold<-sorted_score[threshold_position]
#4 Return the prediction interval which is made up of all the values less than or equal to the threshold
pred_lower_bound<- predict_pen-threshold
pred_upper_bound<- predict_pen+threshold
#Graphing X,Y, and prediction set(shaded bands)
interval_df<-df(lower_bound=pred_lower_bound,
upper_bound=pred_upper_bound)
library(tidyverse)
library(rsample)
ALPHAA<-0.05
mypenguins<-penguins |>
filter(!is.na(body_mass) & !is.na(flipper_len))
n_pen<-nrow(mypenguins)
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the absolute value of the residuals are the score) this is called the training set
all_penguins<-initial_split(mypenguins,prop=0.5)
train_penguins<-training(all_penguins)
calbration_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
#2 Use model from training set and data from other half to compute compute the score(in this case the score is residuals) the data from the other half is called the calibration set
predict_pen<-predict(object=fit_penguins,newdata=calbration_penguins)
score<-abs(predict_pen-calbration_penguins$body_mass)
#3 Sort second half of scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list
sorted_score<-sort(score)
n_score<-length(score)
threshold_position<-ceiling((1-ALPHAA)((n_pen/2)+1))
threshold<-sorted_score[threshold_position]
#4 Return the prediction interval which is made up of all the values less than or equal to the threshold
pred_lower_bound<- predict_pen-threshold
pred_upper_bound<- predict_pen+threshold
#Graphing X,Y, and prediction set(shaded bands)
interval_df<-df(lower_bound=pred_lower_bound,
upper_bound=pred_upper_bound)
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the absolute value of the residuals are the score) this is called the training set
all_penguins<-initial_split(mypenguins,prop=0.5)
train_penguins<-training(all_penguins)
calbration_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
#2 Use model from training set and data from other half to compute compute the score(in this case the score is residuals) the data from the other half is called the calibration set
predict_pen<-predict(object=fit_penguins,newdata=calbration_penguins)
score<-abs(predict_pen-calbration_penguins$body_mass)
#3 Sort second half of scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list
sorted_score<-sort(score)
n_score<-length(score)
threshold_position<-ceiling((1-ALPHAA)*((n_pen/2)+1))
threshold<-sorted_score[threshold_position]
#4 Return the prediction interval which is made up of all the values less than or equal to the threshold
pred_lower_bound<- predict_pen-threshold
pred_upper_bound<- predict_pen+threshold
#Graphing X,Y, and prediction set(shaded bands)
interval_df<-df(lower_bound=pred_lower_bound,
upper_bound=pred_upper_bound)
library(tidyverse)
library(rsample)
ALPHAA<-0.05
mypenguins<-penguins |>
filter(!is.na(body_mass) & !is.na(flipper_len))
n_pen<-nrow(mypenguins)
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the absolute value of the residuals are the score) this is called the training set
all_penguins<-initial_split(mypenguins,prop=0.5)
train_penguins<-training(all_penguins)
calbration_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
#2 Use model from training set and data from other half to compute compute the score(in this case the score is residuals) the data from the other half is called the calibration set
predict_pen<-predict(object=fit_penguins,newdata=calbration_penguins)
score<-abs(predict_pen-calbration_penguins$body_mass)
#3 Sort second half of scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list
sorted_score<-sort(score)
n_score<-length(score)
threshold_position<-ceiling((1-ALPHAA)*((n_pen/2)+1))
threshold<-sorted_score[threshold_position]
#4 Return the prediction interval which is made up of all the values less than or equal to the threshold
pred_lower_bound<- predict_pen-threshold
pred_upper_bound<- predict_pen+threshold
#Graphing X,Y, and prediction set(shaded bands)
interval_df<-df(lower_bound=pred_lower_bound,
upper_bound=pred_upper_bound)
type(pred_lower_bound)
class(pred_lower_bound)
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the absolute value of the residuals are the score) this is called the training set
all_penguins<-initial_split(mypenguins,prop=0.5)
train_penguins<-training(all_penguins)
calbration_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
#2 Use model from training set and data from other half to compute compute the score(in this case the score is residuals) the data from the other half is called the calibration set
predict_pen<-predict(object=fit_penguins,newdata=calbration_penguins)
score<-abs(predict_pen-calbration_penguins$body_mass)
#3 Sort second half of scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list
sorted_score<-sort(score)
n_score<-length(score)
threshold_position<-ceiling((1-ALPHAA)*((n_pen/2)+1))
threshold<-sorted_score[threshold_position]
#4 Return the prediction interval which is made up of all the values less than or equal to the threshold
pred_lower_bound<- predict_pen-threshold
pred_upper_bound<- predict_pen+threshold
#Graphing X,Y, and prediction set(shaded bands)
interval_df<-data.frame(lower_bound=pred_lower_bound,
upper_bound=pred_upper_bound)
View(interval_df)
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the absolute value of the residuals are the score) this is called the training set
all_penguins<-initial_split(mypenguins,prop=0.5)
train_penguins<-training(all_penguins)
calibration_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
#2 Use model from training set and data from other half to compute compute the score(in this case the score is residuals) the data from the other half is called the calibration set
predict_pen<-predict(object=fit_penguins,newdata=calibration_penguins)
score<-abs(predict_pen-calibration_penguins$body_mass)
#3 Sort second half of scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list
sorted_score<-sort(score)
n_score<-length(score)
threshold_position<-ceiling((1-ALPHAA)*((n_pen/2)+1))
threshold<-sorted_score[threshold_position]
#4 Return the prediction interval which is made up of all the values less than or equal to the threshold
pred_lower_bound<- predict_pen-threshold
pred_upper_bound<- predict_pen+threshold
interval_df<-data.frame(lower_bound=pred_lower_bound,
upper_bound=pred_upper_bound)
#Graphing X,Y, and prediction set(shaded bands)
ggplot(calibration_penguins,aes(flipper_len,body_mass))+
geom_point()
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the absolute value of the residuals are the score) this is called the training set
all_penguins<-initial_split(mypenguins,prop=0.5)
train_penguins<-training(all_penguins)
calibration_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
#2 Use model from training set and data from other half to compute compute the score(in this case the score is residuals) the data from the other half is called the calibration set
predict_pen<-predict(object=fit_penguins,newdata=calibration_penguins)
score<-abs(predict_pen-calibration_penguins$body_mass)
#3 Sort second half of scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list
sorted_score<-sort(score)
n_score<-length(score)
threshold_position<-ceiling((1-ALPHAA)*((n_pen/2)+1))
threshold<-sorted_score[threshold_position]
#4 Return the prediction interval which is made up of all the values less than or equal to the threshold
pred_lower_bound<- predict_pen-threshold
pred_upper_bound<- predict_pen+threshold
interval_df<-data.frame(lower_bound=pred_lower_bound,
upper_bound=pred_upper_bound)
#Graphing X,Y, and prediction set(shaded bands)
ggplot(calibration_penguins,aes(flipper_len,body_mass))+
geom_line(aes(y=predict_pen),color="black",size=1)+
geom_ribbon(aes(ymin=pred_lower_bound,ymax = pred_upper_bound),
alpha=0.2,fill="yellow")
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the absolute value of the residuals are the score) this is called the training set
all_penguins<-initial_split(mypenguins,prop=0.5)
train_penguins<-training(all_penguins)
calibration_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
#2 Use model from training set and data from other half to compute compute the score(in this case the score is residuals) the data from the other half is called the calibration set
predict_pen<-predict(object=fit_penguins,newdata=calibration_penguins)
score<-abs(predict_pen-calibration_penguins$body_mass)
#3 Sort second half of scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list
sorted_score<-sort(score)
n_score<-length(score)
threshold_position<-ceiling((1-ALPHAA)*((n_pen/2)+1))
threshold<-sorted_score[threshold_position]
#4 Return the prediction interval which is made up of all the values less than or equal to the threshold
pred_lower_bound<- predict_pen-threshold
pred_upper_bound<- predict_pen+threshold
interval_df<-data.frame(lower_bound=pred_lower_bound,
upper_bound=pred_upper_bound)
#Graphing X,Y, and prediction set(shaded bands)
ggplot(calibration_penguins,aes(flipper_len,body_mass))+
geom_point()
geom_line(aes(y=predict_pen),color="black",size=1)+
geom_ribbon(aes(ymin=pred_lower_bound,ymax = pred_upper_bound),
alpha=0.2,fill="yellow")
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the absolute value of the residuals are the score) this is called the training set
all_penguins<-initial_split(mypenguins,prop=0.5)
train_penguins<-training(all_penguins)
calibration_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
#2 Use model from training set and data from other half to compute compute the score(in this case the score is residuals) the data from the other half is called the calibration set
predict_pen<-predict(object=fit_penguins,newdata=calibration_penguins)
score<-abs(predict_pen-calibration_penguins$body_mass)
#3 Sort second half of scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list
sorted_score<-sort(score)
n_score<-length(score)
threshold_position<-ceiling((1-ALPHAA)*((n_pen/2)+1))
threshold<-sorted_score[threshold_position]
#4 Return the prediction interval which is made up of all the values less than or equal to the threshold
pred_lower_bound<- predict_pen-threshold
pred_upper_bound<- predict_pen+threshold
interval_df<-data.frame(lower_bound=pred_lower_bound,
upper_bound=pred_upper_bound)
#Graphing X,Y, and prediction set(shaded bands)
ggplot(calibration_penguins,aes(flipper_len,body_mass))+
geom_point()+
geom_line(aes(y=predict_pen),color="black",size=1)+
geom_ribbon(aes(ymin=pred_lower_bound,ymax = pred_upper_bound),
alpha=0.2,fill="yellow")
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the absolute value of the residuals are the score) this is called the training set
all_penguins<-initial_split(mypenguins,prop=0.5)
train_penguins<-training(all_penguins)
calibration_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
#2 Use model from training set and data calibration set to compute compute the score(in this case the score is residuals).
predict_pen<-predict(object=fit_penguins,newdata=calibration_penguins)
penguin_sd<-sigma(fit_penguins)
score<-abs((predict_pen-calibration_penguins$body_mass)/penguin_sd)
#3 Sort scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list(round up because its an index and rounding up keeps coverage gurantee)
sorted_score<-sort(score)
n_score<-length(score)
threshold_position<-ceiling((1-ALPHAA)*((n_pen/2)+1))
threshold<-sorted_score[threshold_position]
#4 Return the prediction interval which is predicted values plus and mines threshold score
pred_lower_bound<- predict_pen-threshold
pred_upper_bound<- predict_pen+threshold
interval_df<-data.frame(lower_bound=pred_lower_bound,
upper_bound=pred_upper_bound)
#Graphing X,Y, and prediction set(shaded bands)
ggplot(calibration_penguins,aes(flipper_len,body_mass))+
geom_point()+
geom_line(aes(y=predict_pen),color="black",size=1)+
geom_ribbon(aes(ymin=pred_lower_bound,ymax = pred_upper_bound),
alpha=0.2,fill="yellow")
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the absolute value of the residuals are the score) this is called the training set
all_penguins<-initial_split(mypenguins,prop=0.5)
train_penguins<-training(all_penguins)
calibration_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
#estimating sd
train_predictions<- predict(fit_penguins,newdata = train_penguins)
abs_resids<- abs(train_penguins$body_mass-train_predictions)
sd_estimate<-lm(data=train_penguins,abs_resids~flipper_len)
#2 Use model from training set and data calibration set to compute compute the score(in this case the score is residuals).
predict_pen<-predict(object=fit_penguins,newdata=calibration_penguins)
penguin_sd<-sigma(fit_penguins)
score<-abs((predict_pen-calibration_penguins$body_mass)/penguin_sd)
#3 Sort scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list(round up because its an index and rounding up keeps coverage gurantee)
sorted_score<-sort(score)
n_score<-length(score)
threshold_position<-ceiling((1-ALPHAA)*((n_pen/2)+1))
threshold<-sorted_score[threshold_position]
#4 Return the prediction interval which is predicted values plus and mines threshold score
pred_lower_bound<- predict_pen-threshold
pred_upper_bound<- predict_pen+threshold
interval_df<-data.frame(lower_bound=pred_lower_bound,
upper_bound=pred_upper_bound)
#Graphing X,Y, and prediction set(shaded bands)
ggplot(calibration_penguins,aes(flipper_len,body_mass))+
geom_point()+
geom_line(aes(y=predict_pen),color="black",size=1)+
geom_ribbon(aes(ymin=pred_lower_bound,ymax = pred_upper_bound),
alpha=0.2,fill="yellow")
set.seed(123)
#creating prediction set
#1 Use half of dataset to construct a conformal score function(in this case the absolute value of the residuals are the score) this is called the training set
all_penguins<-initial_split(mypenguins,prop=0.5)
train_penguins<-training(all_penguins)
calibration_penguins<-testing(all_penguins)
fit_penguins<-lm(data=train_penguins,body_mass~flipper_len)
#estimating sd
train_predictions<- predict(fit_penguins,newdata = train_penguins)
abs_resids<- abs(train_penguins$body_mass-train_predictions)
sd_estimate<-lm(data=train_penguins,abs_resids~flipper_len)
#2 Use model from training set and data calibration set to compute compute the score(in this case the score is residuals).
predict_pen<-predict(object=fit_penguins,newdata=calibration_penguins)
penguin_sd<-predict(sd_estimate,newdata = calibration_penguins)
score<-abs((predict_pen-calibration_penguins$body_mass)/penguin_sd)
#3 Sort scores in increasing order and let the threshold be the [(1-a)(n/2 +1)]th element in the sorted list(round up because its an index and rounding up keeps coverage gurantee)
sorted_score<-sort(score)
n_score<-length(score)
threshold_position<-ceiling((1-ALPHAA)*((n_pen/2)+1))
threshold<-sorted_score[threshold_position]
#4 Return the prediction interval which is predicted values plus and mines threshold score
pred_lower_bound<- predict_pen-threshold*penguin_sd
pred_upper_bound<- predict_pen+threshold*penguin_sd
interval_df<-data.frame(lower_bound=pred_lower_bound,
upper_bound=pred_upper_bound)
#Graphing X,Y, and prediction set(shaded bands)
ggplot(calibration_penguins,aes(flipper_len,body_mass))+
geom_point()+
geom_line(aes(y=predict_pen),color="black",size=1)+
geom_ribbon(aes(ymin=pred_lower_bound,ymax = pred_upper_bound),
alpha=0.2,fill="yellow")
